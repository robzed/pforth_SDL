/* WARNING: This is an auto-generated file. Do not edit it manually. 
   Edit the corresponding .fs file instead and run pforth_case_creation.py to regenerate this file. */

err = CreateGlueToC( "sizeof_char", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "sizeof_short", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "sizeof_size_t", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "sizeof_int", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "sizeof_float", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "sizeof_double", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "sizeof_pointer", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetPlatform", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_malloc", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_calloc", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_realloc", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_free", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetOriginalMemoryFunctions", i++, C_RETURNS_VOID, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetMemoryFunctions", i++, C_RETURNS_VOID, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetMemoryFunctions", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetNumAllocations", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_getenv", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_setenv", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_qsort", i++, C_RETURNS_VOID, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_bsearch", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_abs", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_isalpha", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_isalnum", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_isblank", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_iscntrl", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_isdigit", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_isxdigit", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ispunct", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_isspace", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_isupper", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_islower", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_isprint", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_isgraph", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_toupper", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_tolower", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_crc16", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_crc32", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_memset", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_memset4", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_memcpy", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_memmove", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_memcmp", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_wcslen", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_wcslcpy", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_wcslcat", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_wcsdup", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_wcsstr", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_wcscmp", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_wcsncmp", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_wcscasecmp", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_wcsncasecmp", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_strlen", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_strlcpy", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_utf8strlcpy", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_strlcat", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_strdup", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_strrev", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_strupr", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_strlwr", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_strchr", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_strrchr", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_strstr", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_strcasestr", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_strtokr", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_utf8strlen", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_utf8strnlen", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_itoa", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_uitoa", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ltoa", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ultoa", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_lltoa", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ulltoa", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_atoi", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
/*[[[float ret]]] err = CreateGlueToC( "SDL_atof", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
err = CreateGlueToC( "SDL_strtol", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_strtoul", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_strtoll", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_strtoull", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
/*[[[float ret]]] err = CreateGlueToC( "SDL_strtod", i++, C_RETURNS_FLOAT, 2); if( err < 0 ) return err;*/
err = CreateGlueToC( "SDL_strcmp", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_strncmp", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_strcasecmp", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_strncasecmp", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_acos", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_acosf", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_asin", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_asinf", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_atan", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_atanf", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_atan2", i++, C_RETURNS_FLOAT, 2); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_atan2f", i++, C_RETURNS_FLOAT, 2); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_ceil", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_ceilf", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_copysign", i++, C_RETURNS_FLOAT, 2); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_copysignf", i++, C_RETURNS_FLOAT, 2); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_cos", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_cosf", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_exp", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_expf", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_fabs", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_fabsf", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_floor", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_floorf", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_trunc", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_truncf", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_fmod", i++, C_RETURNS_FLOAT, 2); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_fmodf", i++, C_RETURNS_FLOAT, 2); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_log", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_logf", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_log10", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_log10f", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_pow", i++, C_RETURNS_FLOAT, 2); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_powf", i++, C_RETURNS_FLOAT, 2); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_round", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_roundf", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param]]] err = CreateGlueToC( "SDL_lround", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;*/
/*[[[float param]]] err = CreateGlueToC( "SDL_lroundf", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_scalbn", i++, C_RETURNS_FLOAT, 2); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_scalbnf", i++, C_RETURNS_FLOAT, 2); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_sin", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_sinf", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_sqrt", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_sqrtf", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_tan", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_tanf", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
err = CreateGlueToC( "SDL_iconv_open", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_iconv_close", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_iconv", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_iconv_string", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_memcpy4", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_size_mul_overflow", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_size_add_overflow", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetMainReady", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ReportAssertion", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetAssertionHandler", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetDefaultAssertionHandler", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetAssertionHandler", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetAssertionReport", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ResetAssertionReport", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AtomicTryLock", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AtomicLock", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AtomicUnlock", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_MemoryBarrierReleaseFunction", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_MemoryBarrierAcquireFunction", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AtomicCAS", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AtomicSet", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AtomicGet", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AtomicAdd", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AtomicCASPtr", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AtomicSetPtr", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AtomicGetPtr", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetError", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetErrorMsg", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ClearError", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_Error", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_Swap16", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_Swap32", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_Swap64", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
/*[[[float param+ret]]] err = CreateGlueToC( "SDL_SwapFloat", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
err = CreateGlueToC( "SDL_CreateMutex", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LockMutex", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_TryLockMutex", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_UnlockMutex", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_DestroyMutex", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CreateSemaphore", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_DestroySemaphore", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SemWait", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SemTryWait", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SemWaitTimeout", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SemPost", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SemValue", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CreateCond", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_DestroyCond", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CondSignal", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CondBroadcast", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CondWait", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CondWaitTimeout", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CreateThread", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CreateThreadWithStackSize", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetThreadName", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ThreadID", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetThreadID", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetThreadPriority", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_WaitThread", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_DetachThread", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_TLSCreate", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_TLSGet", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_TLSSet", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_TLSCleanup", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RWFromFile", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RWFromFP", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RWFromMem", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RWFromConstMem", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AllocRW", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_FreeRW", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RWsize", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RWseek", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RWtell", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RWread", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RWwrite", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RWclose", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LoadFile_RW", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LoadFile", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ReadU8", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ReadLE16", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ReadBE16", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ReadLE32", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ReadBE32", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ReadLE64", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ReadBE64", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_WriteU8", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_WriteLE16", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_WriteBE16", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_WriteLE32", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_WriteBE32", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_WriteLE64", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_WriteBE64", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetNumAudioDrivers", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetAudioDriver", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AudioInit", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AudioQuit", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetCurrentAudioDriver", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_OpenAudio", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetNumAudioDevices", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetAudioDeviceName", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetAudioDeviceSpec", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetDefaultAudioInfo", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_OpenAudioDevice", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetAudioStatus", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetAudioDeviceStatus", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_PauseAudio", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_PauseAudioDevice", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LoadWAV_RW", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_FreeWAV", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_BuildAudioCVT", i++, C_RETURNS_VALUE, 7); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ConvertAudio", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_NewAudioStream", i++, C_RETURNS_VALUE, 6); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AudioStreamPut", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AudioStreamGet", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AudioStreamAvailable", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AudioStreamFlush", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AudioStreamClear", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_FreeAudioStream", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_MixAudio", i++, C_RETURNS_VOID, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_MixAudioFormat", i++, C_RETURNS_VOID, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_QueueAudio", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_DequeueAudio", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetQueuedAudioSize", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ClearQueuedAudio", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LockAudio", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LockAudioDevice", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_UnlockAudio", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_UnlockAudioDevice", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CloseAudio", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CloseAudioDevice", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetClipboardText", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetClipboardText", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasClipboardText", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetPrimarySelectionText", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetPrimarySelectionText", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasPrimarySelectionText", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetCPUCount", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetCPUCacheLineSize", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasRDTSC", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasAltiVec", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasMMX", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_Has3DNow", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasSSE", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasSSE2", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasSSE3", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasSSE41", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasSSE42", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasAVX", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasAVX2", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasAVX512F", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasARMSIMD", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasNEON", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasLSX", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasLASX", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetSystemRAM", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SIMDGetAlignment", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SIMDAlloc", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SIMDRealloc", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SIMDFree", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetPixelFormatName", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_PixelFormatEnumToMasks", i++, C_RETURNS_VALUE, 6); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_MasksToPixelFormatEnum", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AllocFormat", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_FreeFormat", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AllocPalette", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetPixelFormatPalette", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetPaletteColors", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_FreePalette", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_MapRGB", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_MapRGBA", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetRGB", i++, C_RETURNS_VOID, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetRGBA", i++, C_RETURNS_VOID, 6); if( err < 0 ) return err;
/*[[[float param]]] err = CreateGlueToC( "SDL_CalculateGammaRamp", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;*/
err = CreateGlueToC( "SDL_PointInRect", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RectEmpty", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RectEquals", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasIntersection", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_IntersectRect", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_UnionRect", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_EnclosePoints", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_IntersectRectAndLine", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_PointInFRect", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_FRectEmpty", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
/*[[[float param]]] err = CreateGlueToC( "SDL_FRectEqualsEpsilon", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;*/
err = CreateGlueToC( "SDL_FRectEquals", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasIntersectionF", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_IntersectFRect", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_UnionFRect", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_EncloseFPoints", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_IntersectFRectAndLine", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ComposeCustomBlendMode", i++, C_RETURNS_VALUE, 6); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CreateRGBSurface", i++, C_RETURNS_VALUE, 8); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CreateRGBSurfaceWithFormat", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CreateRGBSurfaceFrom", i++, C_RETURNS_VALUE, 9); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CreateRGBSurfaceWithFormatFrom", i++, C_RETURNS_VALUE, 6); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_FreeSurface", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetSurfacePalette", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LockSurface", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_UnlockSurface", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LoadBMP_RW", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SaveBMP_RW", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetSurfaceRLE", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasSurfaceRLE", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetColorKey", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasColorKey", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetColorKey", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetSurfaceColorMod", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetSurfaceColorMod", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetSurfaceAlphaMod", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetSurfaceAlphaMod", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetSurfaceBlendMode", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetSurfaceBlendMode", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetClipRect", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetClipRect", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_DuplicateSurface", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ConvertSurface", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ConvertSurfaceFormat", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ConvertPixels", i++, C_RETURNS_VALUE, 8); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_PremultiplyAlpha", i++, C_RETURNS_VALUE, 8); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_FillRect", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_FillRects", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_UpperBlit", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LowerBlit", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SoftStretch", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SoftStretchLinear", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_UpperBlitScaled", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LowerBlitScaled", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetYUVConversionMode", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetYUVConversionMode", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetYUVConversionModeForResolution", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetNumVideoDrivers", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetVideoDriver", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_VideoInit", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_VideoQuit", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetCurrentVideoDriver", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetNumVideoDisplays", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetDisplayName", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetDisplayBounds", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetDisplayUsableBounds", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetDisplayDPI", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetDisplayOrientation", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetNumDisplayModes", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetDisplayMode", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetDesktopDisplayMode", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetCurrentDisplayMode", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetClosestDisplayMode", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetPointDisplayIndex", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetRectDisplayIndex", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowDisplayIndex", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowDisplayMode", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowDisplayMode", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowICCProfile", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowPixelFormat", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CreateWindow", i++, C_RETURNS_VALUE, 6); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CreateWindowFrom", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowID", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowFromID", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowFlags", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowTitle", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowTitle", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowIcon", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowData", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowData", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowPosition", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowPosition", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowSize", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowSize", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowBordersSize", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowSizeInPixels", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowMinimumSize", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowMinimumSize", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowMaximumSize", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowMaximumSize", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowBordered", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowResizable", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowAlwaysOnTop", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ShowWindow", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HideWindow", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RaiseWindow", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_MaximizeWindow", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_MinimizeWindow", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RestoreWindow", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowFullscreen", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasWindowSurface", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowSurface", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_UpdateWindowSurface", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_UpdateWindowSurfaceRects", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_DestroyWindowSurface", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowGrab", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowKeyboardGrab", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowMouseGrab", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowGrab", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowKeyboardGrab", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowMouseGrab", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetGrabbedWindow", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowMouseRect", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowMouseRect", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
/*[[[float param]]] err = CreateGlueToC( "SDL_SetWindowBrightness", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;*/
/*[[[float ret]]] err = CreateGlueToC( "SDL_GetWindowBrightness", i++, C_RETURNS_FLOAT, 1); if( err < 0 ) return err;*/
/*[[[float param]]] err = CreateGlueToC( "SDL_SetWindowOpacity", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;*/
err = CreateGlueToC( "SDL_GetWindowOpacity", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowModalFor", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowInputFocus", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowGammaRamp", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetWindowGammaRamp", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowHitTest", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_FlashWindow", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_DestroyWindow", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_IsScreenSaverEnabled", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_EnableScreenSaver", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_DisableScreenSaver", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GL_LoadLibrary", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GL_GetProcAddress", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GL_UnloadLibrary", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GL_ExtensionSupported", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GL_ResetAttributes", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GL_SetAttribute", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GL_GetAttribute", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GL_CreateContext", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GL_MakeCurrent", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GL_GetCurrentWindow", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GL_GetCurrentContext", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GL_GetDrawableSize", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GL_SetSwapInterval", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GL_GetSwapInterval", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GL_SwapWindow", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GL_DeleteContext", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetKeyboardFocus", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetKeyboardState", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ResetKeyboard", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetModState", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetModState", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetKeyFromScancode", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetScancodeFromKey", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetScancodeName", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetScancodeFromName", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetKeyName", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetKeyFromName", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_StartTextInput", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_IsTextInputActive", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_StopTextInput", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ClearComposition", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_IsTextInputShown", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetTextInputRect", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasScreenKeyboardSupport", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_IsScreenKeyboardShown", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetMouseFocus", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetMouseState", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetGlobalMouseState", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetRelativeMouseState", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_WarpMouseInWindow", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_WarpMouseGlobal", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetRelativeMouseMode", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CaptureMouse", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetRelativeMouseMode", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CreateCursor", i++, C_RETURNS_VALUE, 6); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CreateColorCursor", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CreateSystemCursor", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetCursor", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetCursor", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetDefaultCursor", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_FreeCursor", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ShowCursor", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LockJoysticks", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_UnlockJoysticks", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_NumJoysticks", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickNameForIndex", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickPathForIndex", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickGetDevicePlayerIndex", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickGetDeviceVendor", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickGetDeviceProduct", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickGetDeviceProductVersion", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickGetDeviceType", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickGetDeviceInstanceID", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickOpen", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickFromInstanceID", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickFromPlayerIndex", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickAttachVirtual", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickAttachVirtualEx", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickDetachVirtual", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickIsVirtual", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickSetVirtualAxis", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickSetVirtualButton", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickSetVirtualHat", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickName", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickPath", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickGetPlayerIndex", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickSetPlayerIndex", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickGetVendor", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickGetProduct", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickGetProductVersion", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickGetFirmwareVersion", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickGetSerial", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickGetType", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickGetAttached", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickInstanceID", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickNumAxes", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickNumBalls", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickNumHats", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickNumButtons", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickUpdate", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickEventState", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickGetAxis", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickGetAxisInitialState", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickGetHat", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickGetBall", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickGetButton", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickRumble", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickRumbleTriggers", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickHasLED", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickHasRumble", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickHasRumbleTriggers", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickSetLED", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickSendEffect", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickClose", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickCurrentPowerLevel", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LockSensors", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_UnlockSensors", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_NumSensors", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SensorGetDeviceName", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SensorGetDeviceType", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SensorGetDeviceNonPortableType", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SensorGetDeviceInstanceID", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SensorOpen", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SensorFromInstanceID", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SensorGetName", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SensorGetType", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SensorGetNonPortableType", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SensorGetInstanceID", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SensorGetData", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SensorGetDataWithTimestamp", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SensorClose", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SensorUpdate", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerAddMappingsFromRW", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerAddMapping", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerNumMappings", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerMappingForIndex", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerMapping", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_IsGameController", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerNameForIndex", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerPathForIndex", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerTypeForIndex", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerMappingForDeviceIndex", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerOpen", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerFromInstanceID", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerFromPlayerIndex", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerName", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerPath", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetType", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetPlayerIndex", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerSetPlayerIndex", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetVendor", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetProduct", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetProductVersion", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetFirmwareVersion", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetSerial", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetAttached", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetJoystick", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerEventState", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerUpdate", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetAxisFromString", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetStringForAxis", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerHasAxis", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetAxis", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetButtonFromString", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetStringForButton", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerHasButton", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetButton", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetNumTouchpads", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetNumTouchpadFingers", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetTouchpadFinger", i++, C_RETURNS_VALUE, 7); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerHasSensor", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerSetSensorEnabled", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerIsSensorEnabled", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
/*[[[float ret]]] err = CreateGlueToC( "SDL_GameControllerGetSensorDataRate", i++, C_RETURNS_FLOAT, 2); if( err < 0 ) return err;*/
err = CreateGlueToC( "SDL_GameControllerGetSensorData", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetSensorDataWithTimestamp", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerRumble", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerRumbleTriggers", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerHasLED", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerHasRumble", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerHasRumbleTriggers", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerSetLED", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerSendEffect", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerClose", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetAppleSFSymbolsNameForButton", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GameControllerGetAppleSFSymbolsNameForAxis", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetNumTouchDevices", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetTouchDevice", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetTouchName", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetTouchDeviceType", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetNumTouchFingers", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetTouchFinger", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RecordGesture", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SaveAllDollarTemplates", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SaveDollarTemplate", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LoadDollarTemplates", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_PumpEvents", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_PeepEvents", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasEvent", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HasEvents", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_FlushEvent", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_FlushEvents", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_PollEvent", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_WaitEvent", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_WaitEventTimeout", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_PushEvent", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetEventFilter", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetEventFilter", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AddEventWatch", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_DelEventWatch", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_FilterEvents", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_EventState", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RegisterEvents", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetBasePath", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetPrefPath", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_NumHaptics", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticName", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticOpen", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticOpened", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticIndex", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_MouseIsHaptic", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticOpenFromMouse", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_JoystickIsHaptic", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticOpenFromJoystick", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticClose", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticNumEffects", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticNumEffectsPlaying", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticQuery", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticNumAxes", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticEffectSupported", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticNewEffect", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticUpdateEffect", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticRunEffect", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticStopEffect", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticDestroyEffect", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticGetEffectStatus", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticSetGain", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticSetAutocenter", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticPause", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticUnpause", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticStopAll", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticRumbleSupported", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_HapticRumbleInit", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
/*[[[float param]]] err = CreateGlueToC( "SDL_HapticRumblePlay", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;*/
err = CreateGlueToC( "SDL_HapticRumbleStop", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_hid_init", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_hid_exit", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_hid_device_change_count", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_hid_enumerate", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_hid_free_enumeration", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_hid_open", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_hid_open_path", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_hid_write", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_hid_read_timeout", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_hid_read", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_hid_set_nonblocking", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_hid_send_feature_report", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_hid_get_feature_report", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_hid_close", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_hid_get_manufacturer_string", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_hid_get_product_string", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_hid_get_serial_number_string", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_hid_get_indexed_string", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_hid_ble_scan", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetHintWithPriority", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetHint", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ResetHint", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ResetHints", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetHint", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetHintBoolean", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AddHintCallback", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_DelHintCallback", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ClearHints", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LoadObject", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LoadFunction", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_UnloadObject", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LogSetAllPriority", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LogSetPriority", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LogGetPriority", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LogResetPriorities", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LogGetOutputFunction", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LogSetOutputFunction", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ShowMessageBox", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_ShowSimpleMessageBox", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_Metal_CreateView", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_Metal_DestroyView", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_Metal_GetLayer", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_Metal_GetDrawableSize", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetPowerInfo", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetNumRenderDrivers", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetRenderDriverInfo", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CreateWindowAndRenderer", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CreateRenderer", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CreateSoftwareRenderer", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetRenderer", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderGetWindow", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetRendererInfo", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetRendererOutputSize", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CreateTexture", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CreateTextureFromSurface", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_QueryTexture", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetTextureColorMod", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetTextureColorMod", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetTextureAlphaMod", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetTextureAlphaMod", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetTextureBlendMode", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetTextureBlendMode", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetTextureScaleMode", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetTextureScaleMode", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetTextureUserData", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetTextureUserData", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_UpdateTexture", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_UpdateYUVTexture", i++, C_RETURNS_VALUE, 8); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_UpdateNVTexture", i++, C_RETURNS_VALUE, 6); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LockTexture", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_LockTextureToSurface", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_UnlockTexture", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderTargetSupported", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetRenderTarget", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetRenderTarget", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderSetLogicalSize", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderGetLogicalSize", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderSetIntegerScale", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderGetIntegerScale", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderSetViewport", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderGetViewport", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderSetClipRect", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderGetClipRect", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderIsClipEnabled", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
/*[[[float param]]] err = CreateGlueToC( "SDL_RenderSetScale", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;*/
err = CreateGlueToC( "SDL_RenderGetScale", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderWindowToLogical", i++, C_RETURNS_VOID, 5); if( err < 0 ) return err;
/*[[[float param]]] err = CreateGlueToC( "SDL_RenderLogicalToWindow", i++, C_RETURNS_VOID, 5); if( err < 0 ) return err;*/
err = CreateGlueToC( "SDL_SetRenderDrawColor", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetRenderDrawColor", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetRenderDrawBlendMode", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetRenderDrawBlendMode", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderClear", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderDrawPoint", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderDrawPoints", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderDrawLine", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderDrawLines", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderDrawRect", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderDrawRects", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderFillRect", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderFillRects", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderCopy", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
/*[[[float param]]] err = CreateGlueToC( "SDL_RenderCopyEx", i++, C_RETURNS_VALUE, 7); if( err < 0 ) return err;*/
/*[[[float param]]] err = CreateGlueToC( "SDL_RenderDrawPointF", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;*/
err = CreateGlueToC( "SDL_RenderDrawPointsF", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
/*[[[float param]]] err = CreateGlueToC( "SDL_RenderDrawLineF", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;*/
err = CreateGlueToC( "SDL_RenderDrawLinesF", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderDrawRectF", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderDrawRectsF", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderFillRectF", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderFillRectsF", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderCopyF", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
/*[[[float param]]] err = CreateGlueToC( "SDL_RenderCopyExF", i++, C_RETURNS_VALUE, 7); if( err < 0 ) return err;*/
err = CreateGlueToC( "SDL_RenderGeometry", i++, C_RETURNS_VALUE, 6); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderGeometryRaw", i++, C_RETURNS_VALUE, 12); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderReadPixels", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderPresent", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_DestroyTexture", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_DestroyRenderer", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderFlush", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GL_BindTexture", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GL_UnbindTexture", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderGetMetalLayer", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderGetMetalCommandEncoder", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RenderSetVSync", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_CreateShapedWindow", i++, C_RETURNS_VALUE, 6); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_IsShapedWindow", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_SetWindowShape", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetShapedWindowMode", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_IsTablet", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_OnApplicationWillTerminate", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_OnApplicationDidReceiveMemoryWarning", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_OnApplicationWillResignActive", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_OnApplicationDidEnterBackground", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_OnApplicationWillEnterForeground", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_OnApplicationDidBecomeActive", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetTicks", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetTicks64", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetPerformanceCounter", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetPerformanceFrequency", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_Delay", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_AddTimer", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_RemoveTimer", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetVersion", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetRevision", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_GetPreferredLocales", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_OpenURL", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_Init", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_InitSubSystem", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_QuitSubSystem", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_WasInit", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "SDL_Quit", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_GetError", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_ClearError", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_Linked_Version", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_Init", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_Quit", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadTyped_RW", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_Load", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_Load_RW", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadTextureType_RW", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadTexture", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadTexture_RW", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_isAVIF", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_isICO", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_isCUR", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_isBMP", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_isGIF", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_isJPG", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_isJXL", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_isLBM", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_isPCX", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_isPNG", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_isPNM", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_isSVG", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_isQOI", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_isTIF", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_isXCF", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_isXPM", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_isXV", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_isWEBP", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadAVIF_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadICO_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadCUR_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadBMP_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadGIF_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadJPG_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadJXL_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadLBM_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadPCX_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadPNG_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadPNM_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadSVG_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadQOI_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadTGA_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadTIF_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadXCF_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadXPM_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadXV_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadWEBP_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadSizedSVG_RW", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_ReadXPMFromArray", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_ReadXPMFromArrayToRGB888", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_SavePNG", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_SavePNG_RW", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_SaveJPG", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_SaveJPG_RW", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadAnimation", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadAnimation_RW", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadAnimationTyped_RW", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_FreeAnimation", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "IMG_LoadGIFAnimation_RW", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_GetError", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_ClearError", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_Linked_Version", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_GetFreeTypeVersion", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_GetHarfBuzzVersion", i++, C_RETURNS_VOID, 3); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_ByteSwappedUNICODE", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_Init", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_OpenFont", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_OpenFontIndex", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_OpenFontRW", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_OpenFontIndexRW", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_OpenFontDPI", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_OpenFontIndexDPI", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_OpenFontDPIRW", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_OpenFontIndexDPIRW", i++, C_RETURNS_VALUE, 6); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_SetFontSize", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_SetFontSizeDPI", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_GetFontStyle", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_SetFontStyle", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_GetFontOutline", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_SetFontOutline", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_GetFontHinting", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_SetFontHinting", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_GetFontWrappedAlign", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_SetFontWrappedAlign", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_FontHeight", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_FontAscent", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_FontDescent", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_FontLineSkip", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_GetFontKerning", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_SetFontKerning", i++, C_RETURNS_VOID, 2); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_FontFaces", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_FontFaceIsFixedWidth", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_FontFaceFamilyName", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_FontFaceStyleName", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_GlyphIsProvided", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_GlyphIsProvided32", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_GlyphMetrics", i++, C_RETURNS_VALUE, 7); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_GlyphMetrics32", i++, C_RETURNS_VALUE, 7); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_SizeText", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_SizeUTF8", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_SizeUNICODE", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_MeasureText", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_MeasureUTF8", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_MeasureUNICODE", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderText_Solid", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderUTF8_Solid", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderUNICODE_Solid", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderText_Solid_Wrapped", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderUTF8_Solid_Wrapped", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderUNICODE_Solid_Wrapped", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderGlyph_Solid", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderGlyph32_Solid", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderText_Shaded", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderUTF8_Shaded", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderUNICODE_Shaded", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderText_Shaded_Wrapped", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderUTF8_Shaded_Wrapped", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderUNICODE_Shaded_Wrapped", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderGlyph_Shaded", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderGlyph32_Shaded", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderText_Blended", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderUTF8_Blended", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderUNICODE_Blended", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderText_Blended_Wrapped", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderUTF8_Blended_Wrapped", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderUNICODE_Blended_Wrapped", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderGlyph_Blended", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderGlyph32_Blended", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderText_LCD", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderUTF8_LCD", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderUNICODE_LCD", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderText_LCD_Wrapped", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderUTF8_LCD_Wrapped", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderUNICODE_LCD_Wrapped", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderGlyph_LCD", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_RenderGlyph32_LCD", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_CloseFont", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_Quit", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_WasInit", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_GetFontKerningSizeGlyphs", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_GetFontKerningSizeGlyphs32", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_SetFontSDF", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_GetFontSDF", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_SetFontDirection", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "TTF_SetFontScriptName", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetError", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_ClearError", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_Linked_Version", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_Init", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_Quit", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_OpenAudio", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_OpenAudioDevice", i++, C_RETURNS_VALUE, 6); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_QuerySpec", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_AllocateChannels", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_LoadWAV_RW", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_LoadWAV", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_LoadMUS", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_LoadMUS_RW", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_LoadMUSType_RW", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_QuickLoad_WAV", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_QuickLoad_RAW", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_FreeChunk", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_FreeMusic", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetNumChunkDecoders", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetChunkDecoder", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_HasChunkDecoder", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetNumMusicDecoders", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetMusicDecoder", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_HasMusicDecoder", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetMusicType", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetMusicTitle", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetMusicTitleTag", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetMusicArtistTag", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetMusicAlbumTag", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetMusicCopyrightTag", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetMusicHookData", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_SetPanning", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_SetPosition", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_SetDistance", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_SetReverseStereo", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "MMix_ReserveChannels", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GroupChannel", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GroupChannels", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GroupAvailable", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GroupCount", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GroupOldest", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GroupNewer", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_PlayChannel", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_PlayChannelTimed", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_PlayMusic", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_FadeInMusic", i++, C_RETURNS_VALUE, 3); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_FadeInMusicPos", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_FadeInChannel", i++, C_RETURNS_VALUE, 4); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_FadeInChannelTimed", i++, C_RETURNS_VALUE, 5); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_Volume", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_VolumeChunk", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_VolumeMusic", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetMusicVolume", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_MasterVolume", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_HaltChannel", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_HaltGroup", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_HaltMusic", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_ExpireChannel", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_FadeOutChannel", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_FadeOutGroup", i++, C_RETURNS_VALUE, 2); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_FadeOutMusic", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_FadingMusic", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_FadingChannel", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_Pause", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_Resume", i++, C_RETURNS_VOID, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_Paused", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_PauseMusic", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_ResumeMusic", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_RewindMusic", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_PausedMusic", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_ModMusicJumpToOrder", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_SetMusicPosition", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetMusicPosition", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_MusicDuration", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetMusicLoopStartTime", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetMusicLoopEndTime", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetMusicLoopLengthTime", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_Playing", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_PlayingMusic", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_SetMusicCMD", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_SetSoundFonts", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetSoundFonts", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_SetTimidityCfg", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetTimidityCfg", i++, C_RETURNS_VALUE, 0); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_GetChunk", i++, C_RETURNS_VALUE, 1); if( err < 0 ) return err;
err = CreateGlueToC( "Mix_CloseAudio", i++, C_RETURNS_VOID, 0); if( err < 0 ) return err;
